/*
 * Copyright (c) 2008-2014 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.api.query;

import org.apache.commons.lang3.StringUtils;
import org.labkey.api.data.CompareType;
import org.labkey.api.data.ContainerFilter;
import org.labkey.api.view.ActionURL;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.StringUtils.defaultIfBlank;
import static org.apache.commons.lang3.StringUtils.startsWith;
import static org.apache.commons.lang3.StringUtils.trimToNull;

/*
* User: Dave
* Date: Aug 13, 2008
* Time: 1:21:48 PM
*/
public class RExportScriptModel extends ExportScriptModel
{
    static final String defaultVariableName = "labkey.data";
    protected final String variableName;
    protected final boolean clean;
    protected final String view;

    public RExportScriptModel(QueryView view)
    {
        this(view, defaultVariableName);
    }

    protected RExportScriptModel(QueryView view, String defaultVariableName)
    {
        super(view);

        // CONSIDER: is there a better way to pass through custom parameters??? (RExportScriptModel constructor?)
        ActionURL url = getQueryView().getSettings().getSortFilterURL();
        String v = defaultIfBlank(url.getParameter("r~variable"), defaultVariableName);
        if (!islegal(v))
        {
            v = v.replaceAll("[^\\p{Alnum}\\._]","_");
            if (!islegal(v))
                v = "`" + v + "`";
        }
        this.variableName = v;
        this.clean = "1".equals(url.getParameter("r~clean"));
        this.view = trimToNull(url.getParameter("r~view"));
    }

    boolean islegal(String v)
    {
        if (!Pattern.matches("[\\p{Alnum}\\._]+",v) || Pattern.matches("^\\.\\p{Digit}.*",v))
            return false;
        if (startsWith(v,"."))
            return false;
        if (Arrays.asList("TRUE","FALSE","NULL","Inf","NaN","NA","NA_integer_","NA_real_","NA_complex_","NA_character_").contains(v))
            return false;
        return true;
    }

    @Override
    public String getViewName()
    {
        return StringUtils.trimToEmpty(super.getViewName());
    }

    public String getFilters()
    {
        List<String> filterExprs = getFilterExpressions();

        if (filterExprs.isEmpty())
            return "NULL";

        StringBuilder filtersExpr = new StringBuilder("makeFilter(");
        String sep = "";

        for (String mf : filterExprs)
        {
            filtersExpr.append(sep);
            filtersExpr.append(mf);
            sep = ",";
        }

        filtersExpr.append(")");

        return filtersExpr.toString();
    }

    protected String makeFilterExpression(String name, CompareType operator, String value)
    {
        return "c(" + doubleQuote(name) + ", " + doubleQuote(operator.getScriptName()) + ", " + doubleQuote(value) + ")";
    }

    public String getContainerFilterString()
    {
        ContainerFilter containerFilter = super.getContainerFilter();
        if (null == containerFilter || null == containerFilter.getType())
            return "NULL";
        else
            return (" " + doubleQuote(containerFilter.getType().name()) + " " );
    }

    @Override
    public String getScriptExportText()
    {
        StringBuilder sb = new StringBuilder();

        if (!clean)
        {
            sb.append("## R Script generated by ").append(getInstallationName()).append(" on ").append(getCreatedOn()).append("\n");
            sb.append("#").append("\n");
            sb.append("# This script makes use of the LabKey Remote API for R package (Rlabkey), which can be obtained via CRAN").append("\n");
            sb.append("# using the package name \"Rlabkey\".  The Rlabkey package also depends on the \"rjson\" and \"rCurl\" packages.").append("\n");
            sb.append("#").append("\n");
            sb.append("# See https://www.labkey.org/wiki/home/Documentation/page.view?name=rAPI for more information.").append("\n");
            sb.append("\n");
            sb.append("library(Rlabkey)").append("\n");
            sb.append("\n");
            sb.append("# Select rows into a data frame called 'mydata'").append("\n");
            sb.append("\n");
        }
        String nl = "\n"; //clean ? "" : "\n";
        String indent = "    "; //clean ? StringUtils.repeat(" ", 4) : "";
        sb.append(variableName + " <- labkey.selectRows(").append(nl);
        sb.append(indent).append("baseUrl=").append(doubleQuote(getBaseUrl())).append(", ").append(nl);
        sb.append(indent).append("folderPath=").append(doubleQuote(getFolderPath())).append(", ").append(nl);
        sb.append(indent).append("schemaName=").append(doubleQuote(getSchemaName())).append(", ").append(nl);
        sb.append(indent).append("queryName=").append(doubleQuote(getQueryName())).append(", ").append(nl);
        sb.append(indent).append("viewName=").append(doubleQuote(getViewName())).append(", ").append(nl);

        String sort = getSort();
        if (sort != null)
            sb.append(indent).append("colSort=").append(doubleQuote(getSort())).append(", ").append(nl);
        sb.append(indent).append("colFilter=").append(getFilters()).append(", ").append(nl);
        sb.append(indent).append("containerFilter=").append(getContainerFilterString()).append(nl);
        sb.append(")\n");

        if ("rstudio".equals(view))
            sb.append("\nsprintf(\"" + variableName + " has %d rows(s)\", nrow(" + variableName + "))");
        if ("r".equals(view))
            sb.append(variableName + "\n");

        return sb.toString();
    }
}
