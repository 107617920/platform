import org.labkey.gradle.plugin.LabKeyExtension
import org.labkey.gradle.util.BuildUtils

apply plugin: 'java'
apply plugin: 'org.labkey.simpleModule'

List spring = [
        "org.springframework:spring-aop:${springVersion}",
        "org.springframework:spring-beans:${springVersion}",
        "org.springframework:spring-context:${springVersion}",
        "org.springframework:spring-core:${springVersion}",
        "org.springframework:spring-expression:${springVersion}",
        "org.springframework:spring-jdbc:${springVersion}",
        "org.springframework:spring-test:${springVersion}",
        "org.springframework:spring-tx:${springVersion}",
        "org.springframework:spring-web:${springVersion}",
        "org.springframework:spring-webmvc:${springVersion}"
]

List apache = [
        "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}",
        "commons-codec:commons-codec:${commonsCodecVersion}",
        "org.apache.commons:commons-collections4:${commonsCollections4Version}",
        "commons-dbcp:commons-dbcp:${commonsDbcpVersion}",
        "commons-digester:commons-digester:${commonsDigesterVersion}",
        "commons-discovery:commons-discovery:${commonsDiscoveryVersion}",
        "commons-fileupload:commons-fileupload:${commonsFileuploadVersion}",
        "commons-io:commons-io:${commonsIoVersion}",
        "org.apache.commons:commons-lang3:${commonsLang3Version}",
        "org.apache.commons:commons-math3:${commonsMath3Version}",
        "commons-net:commons-net:${commonsNetVersion}",
        "commons-pool:commons-pool:${commonsPoolVersion}",
        "commons-validator:commons-validator:${commonsValidatorVersion}",
        "org.apache.httpcomponents:httpclient:${httpclientVersion}",
        "org.apache.httpcomponents:httpcore:${httpcoreVersion}",
        "org.apache.poi:poi:${poiVersion}",
        "org.apache.poi:poi-ooxml:${poiVersion}",
        "org.apache.pdfbox:pdfbox:${pdfboxVersion}"
]


List gwt = [
        "com.allen-sauer.gwt.dnd:gwt-dnd:${gwtDndVersion}",
        "com.google.gwt:gwt-servlet:${gwtServletVersion}",
        "com.extjs:gxt:${gxtVersion}"
]

List jackson = [
        "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}",
        "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
        "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
//        "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}" // included separately below so we can exclude the json jar it brings in
]

List charting = [
        "org.jfree:jfreechart:${jfreechartVersion}"
]

List caching = [
        "net.sf.ehcache:ehcache-core:${ehcacheCoreVersion}"
]

List logging = [
        "log4j:log4j:${log4jVersion}"
]

List r = [
        "net.rforge:rengine:${rforgeVersion}",
        "net.rforge:rserve:${rforgeVersion}"
]

List test = [
        "org.jmock:jmock:${jmockVersion}",
        "org.jmock:jmock-legacy:${jmockVersion}",
        "junit:junit:${junitVersion}"
]

List others = [
        "gov.nist.math:jama:${jamaVersion}",
        "org.jetbrains:annotations:${annotationsVersion}",
        "org.apache.xmlgraphics:batik:${batikVersion}",
        "flyingsaucer:core-renderer:${flyingsaucerVersion}",
        "com.google.guava:guava:${guavaVersion}",
        "net.sf.jtidy:jtidy:${jtidyVersion}",
        "jexcelapi:jxl:${jxlVersion}",
        "com.google.code.kaptcha:kaptcha:${kaptchaVersion}",
        "org.objenesis:objenesis:${objenesisVersion}",
        "com.opencsv:opencsv:${opencsvVersion}",
        "org.ardverk:patricia-trie:${patriciaTrieVersion}",
        "org.quartz-scheduler:quartz:${quartzVersion}",
        "com.rometools:rome:${romeVersion}",
        "org.xerial:sqlite-jdbc:${sqliteJdbcVersion}",
        "net.coobird:thumbnailator:${thumbnailatorVersion}",
        "org.apache.xmlbeans:xbean:${xmlbeansVersion}",
        "org.apache.tika:tika-core:${tikaVersion}",
        "cglib:cglib-nodep:${cglibNodepVersion}",
        "xerces:xercesImpl:${xercesImplVersion}"
]

List ant = [
        "org.apache.ant:ant:${antVersion}"
]

List javax = [
        "javax.validation:validation-api:${validationApiVersion}",
        "javax.xml:jaxrpc:${jaxrpcVersion}",
]

configurations {
    // Exclude the bundled org.json library from com.fasterxml.jackson.datatype:jackson-datatype-json-org dependency
    all*.exclude group: "org.apache.geronimo.bundles", module: "json"
}

// this is required for compiling the API jar file.
// TODO move the directory into this module
sourceSets {
  main {
    java {
      srcDirs =["src", "${parent.projectDir}/internal/gwtsrc"]
    }
  }
}

dependencies {
  BuildUtils.addLabKeyDependency(project: project, config: "compile", depProjectPath: ":schemas", depProjectConfig: "xmlSchema")
  BuildUtils.addLabKeyDependency(project: project, config: "compile", depProjectPath: ":remoteapi:java")

  local fileTree(dir: "$tomcatDir/lib", includes: ['*.jar'], excludes: ['servlet-api.jar', 'mail.jar'])
  // the following two libraries are required for compilation but we don't want extra ones in the classpath, so we exclude
  // them from external dependencies in favor of the versions in the tomcat directory (FIXME seems somewhat sketchy...)
  compile "javax.servlet:servlet-api:${servletApiVersion}"
  compile "com.sun.mail:javax.mail:${javaxMailVersion}"
  // picard brings in a version of servlet-api and a very old one at that, so we excluded it
  external("com.github.broadinstitute:picard:${picardLibVersion}") {
      exclude group: "javax.servlet", module: "servlet-api"
  }
  external("com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}") {
      // exclude this because it gets in the way of our own JSON object implementations from server/api
      exclude group: "org.json", module:"json"
  }
  external ant,apache,caching,charting,gwt,jackson,javax,logging,others,r,spring

    // These are required for running unit tests through the server junit controller
  external test
  jspCompile files(project.tasks.jar)
  jspCompile apache, jackson, spring
}

// We need to copy resource files into the staging webapp directory so they can be copied to
// the jsptmp directory for use in compiling JSPs
project.task("stageApiWebapp",
        type: Copy,
        {CopySpec copy ->
            copy.from project.sourceSets.webapp.output
            copy.into project.staging.webappDir
        }
)
project.tasks.copyTagLibs.dependsOn(project.tasks.stageApiWebapp)

if (LabKeyExtension.isDevMode(project) && !Boolean.valueOf((String) project.buildFromSource))
{
  project.project(":server").tasks.deployApp.dependsOn project.tasks.stageApiWebapp
}
