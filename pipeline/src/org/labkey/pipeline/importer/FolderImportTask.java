package org.labkey.pipeline.importer;

import org.labkey.api.admin.FolderImporter;
import org.labkey.api.admin.FolderSerializationRegistry;
import org.labkey.api.pipeline.*;
import org.labkey.api.services.ServiceRegistry;
import org.labkey.api.util.FileType;
import org.labkey.api.writer.FileSystemFile;
import org.labkey.api.writer.VirtualFile;

import java.util.*;

/*
* User: cnathe
* Date: Jan 19, 2012
*/
public class FolderImportTask extends PipelineJob.Task<FolderImportTask.Factory>
{
    private FolderImportTask(Factory factory, PipelineJob job)
    {
        super(factory, job);
    }

    public RecordedActionSet run() throws PipelineJobException
    {
        PipelineJob job = getJob();
        FolderJobSupport support = job.getJobSupport(FolderJobSupport.class);

        try
        {
            FolderSerializationRegistry registry = ServiceRegistry.get().getService(FolderSerializationRegistry.class);
            Collection<FolderImporter> importers = registry.getRegisteredFolderImporters();
            for (FolderImporter importer : importers)
            {
                job.info("Importing " + importer.getDescription());
                job.setStatus("IMPORT " + importer.getDescription());
                importer.process(support.getImportContext(), support.getRoot());
                job.info("Done importing " + importer.getDescription());
            }

            List<PipelineJobWarning> warnings = new ArrayList<PipelineJobWarning>();
            for (FolderImporter importer : importers)
            {
                job.info("Post-processing " + importer.getDescription());
                job.setStatus("POST-PROCESS " + importer.getDescription());
                Collection<PipelineJobWarning> importerWarnings = importer.postProcess(support.getImportContext(), support.getRoot());
                if (null != importerWarnings)
                    warnings.addAll(importerWarnings);
                job.info("Done post-processing " + importer.getDescription());
            }
            //TODO: capture warnings in the pipeline job and make a distinction between success & success with warnings
            //for now, just fail the job if there were any warnings. The warnings will
            //have already been written to the log
            if (warnings.size() > 0)
                job.error("Warnings were generated by the folder importers!");
        }
        catch (Exception e)
        {
            throw new PipelineJobException(e);
        }

        return new RecordedActionSet();
    }


    public static class Factory extends AbstractTaskFactory<AbstractTaskFactorySettings, Factory>
    {
        public Factory()
        {
            super(FolderImportTask.class);
        }

        public PipelineJob.Task createTask(PipelineJob job)
        {
            return new FolderImportTask(this, job);
        }

        public List<FileType> getInputTypes()
        {
            return Collections.emptyList();
        }

        public List<String> getProtocolActionNames()
        {
            return Collections.emptyList();
        }

        public String getStatusName()
        {
            return "FOLDER IMPORT";
        }

        public boolean isJobComplete(PipelineJob job)
        {
            return false;
        }
    }
}
