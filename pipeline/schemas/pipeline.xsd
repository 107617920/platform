<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://labkey.org/pipeline/xml"
           xmlns:p="http://labkey.org/pipeline/xml"
           targetNamespace="http://labkey.org/pipeline/xml"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    <xs:annotation>
        <xs:documentation>Task Factory and Task Pipeline definitions</xs:documentation>
    </xs:annotation>

    <xs:element name="task" type="NamedTaskType">
        <xs:unique name="namedTask_uniqueInputOutputName">
            <xs:selector xpath="./p:inputs/*|./p:outputs/*"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>

    <xs:element name="pipeline" type="TaskPipelineType"/>

    <xs:group name="InfoGroup">
        <xs:sequence>
            <xs:element name="description" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Short, one line description.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="help" type="xs:string" minOccurs="0"/>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="TaskPipelineType">
        <xs:sequence>
            <xs:group ref="InfoGroup"/>
            <xs:element name="author" type="xs:string" minOccurs="0"/>
            <xs:element name="analyzeURL" type="xs:string" minOccurs="0"/>
            <xs:element name="defaultDisplay" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="enabled"/>
                        <xs:enumeration value="disabled"/>
                        <xs:enumeration value="toolbar"/>
                        <xs:enumeration value="admin"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <!--<xs:element name="initialInputs"/>-->
            <xs:element name="tasks" type="TasksType"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="version" type="xs:double" use="required"/>
    </xs:complexType>

    <!--
    TODO: This isn't quite right.  We may want to allow defining tasks locally, but more
    important is refrencing an existing task and setting parameter values.
    Also, we may need a way to glue separate task inputs and outputs together.

    <tasks>
        <task id="1" ref="copy-task">
        </task>
        <task id="2" ref="process-task">
            <inputmap>
                <map task=1 output=foo.txt input=myinput.txt/>
            </inputmap>
        </task>
    </tasks>
    -->
    <xs:complexType name="TasksType">
        <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="task" type="LocalOrRefTaskType">
                <xs:unique name="localTask_uniqueInputOutputName">
                    <xs:selector xpath="inputs|outputs"/>
                    <xs:field xpath="@name"/>
                </xs:unique>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:group name="TaskGroup">
        <xs:sequence>
            <xs:group ref="InfoGroup"/>
            <xs:element name="author" type="xs:string" minOccurs="0"/>
            <xs:element name="location" type="xs:string" minOccurs="0"/>
            <xs:element name="inputs" type="InputsType" minOccurs="0"/>
            <xs:element name="outputs" type="OutputsType" minOccurs="0"/>
            <!-- only one of exec or script is allowed, but this is difficult to represent in XMLSchema -->
            <xs:element name="exec" type="ExecType" minOccurs="0"/>
            <xs:element name="script" type="ScriptType" minOccurs="0"/>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="NamedTaskType">
        <xs:group ref="TaskGroup"/>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Task name for this task.
                The name must be unique within the module defining the task.
                The task xml definition must be in a file with the same name and with a suffix '.task.xml'</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="version" type="xs:double" use="required">
            <xs:annotation><xs:documentation>Version number of the task.</xs:documentation></xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="LocalOrRefTaskType">
        <xs:group ref="TaskGroup" minOccurs="0"/>
        <xs:attribute name="ref" type="xs:string"/>
        <xs:attribute name="name" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="ScriptType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="interpreter" type="xs:string" />
                <xs:attribute name="file" type="xs:string" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="ExecType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="exe" type="xs:string" />
                <!-- TODO:
                <xs:attribute name="softwarePackage" type="xs:string" />
                  - version could be literal "1.0" or a parameter name, e.g "exeVersion"
                  - the ${version} token in the exe path will be replaced by the version provided.
                <xs:attribute name="version" type="xs:string" />
                <xs:attribute name="installPath" type="xs:string" />
                -->
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="InputsType">
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <!-- CONSIDER: reference specific file types like fasta or a tsv with specific shape (columns, etc) -->
                <xs:element name="file" type="FileInputType"/>
                <xs:element name="property" type="PropertyInputType"/>
                <xs:element name="text" type="TextInputType"/>
                <xs:element name="integer" type="IntInputType"/>
                <xs:element name="double" type="DoubleInputType"/>
                <!--
                <xs:element name="boolean" type="BooleanInputType"/>
                <xs:element name="select" type="SelectInputType"/>
                <xs:element name="query" type="QueryInputType"/>
                <xs:element name="user" type="UserInputType"/>
                <xs:element name="email" type="EmailInputType"/>
                TODO: named group of inputs for html fieldset
                <xs:element name="group" type="GroupInputType"/>
                TODO: repeated inputs (or group) for multi-value/array entries
                TODO: conditional inputs based on values of other inputs
                -->
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="InputOutputType" abstract="true">
        <xs:sequence>
            <xs:group ref="InfoGroup"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="required" type="xs:boolean"/>
    </xs:complexType>

    <xs:simpleType name="strings">
        <xs:list itemType="xs:string"/>
    </xs:simpleType>

    <xs:attributeGroup name="FileTypeAttrGroup">
        <xs:attribute name="suffixes" type="strings"/>
        <xs:attribute name="directory" type="xs:boolean"/>
        <xs:attribute name="contentType" type="xs:string"/>
        <!-- TODO: other TaskPath settings: splitFiles, copyInput, forceToAnalysisDir ? -->
    </xs:attributeGroup>

    <xs:complexType name="FileInputOutputType" abstract="true">
        <xs:complexContent>
            <xs:extension base="InputOutputType">
                <!-- TODO: the ExpData lsid ?? -->
                <!--<xs:element name="dataType" type="xs:string" minOccurs="0"/>-->
                <xs:attributeGroup ref="FileTypeAttrGroup"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:attributeGroup name="InputAttrGroup">
        <xs:attribute name="label" type="xs:string"/>
        <xs:attribute name="switch" type="xs:string"/>
    </xs:attributeGroup>

    <xs:complexType name="FileInputType">
        <xs:complexContent>
            <xs:extension base="FileInputOutputType">
                <xs:attributeGroup ref="InputAttrGroup"/>
                <xs:attribute name="ref" type="xs:IDREF"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="FileOutputType">
        <xs:complexContent>
            <xs:extension base="FileInputOutputType">
                <xs:attribute name="ref" type="xs:IDREF"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="SimpleInputType" abstract="true">
        <xs:complexContent>
            <xs:extension base="InputOutputType">
                <xs:attributeGroup ref="InputAttrGroup"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="PropertyInputType">
        <xs:complexContent>
            <xs:extension base="SimpleInputType">
                <xs:attribute name="uri" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="TextInputType">
        <xs:complexContent>
            <xs:extension base="SimpleInputType">
                <xs:attribute name="default" type="xs:string"/>
                <xs:attribute name="minLength" type="xs:int"/>
                <xs:attribute name="maxLength" type="xs:int"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="IntInputType">
        <xs:complexContent>
            <xs:extension base="SimpleInputType">
                <xs:attribute name="default" type="xs:int"/>
                <xs:attribute name="min" type="xs:int"/>
                <xs:attribute name="max" type="xs:int"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="DoubleInputType">
        <xs:complexContent>
            <xs:extension base="SimpleInputType">
                <xs:attribute name="default" type="xs:double"/>
                <xs:attribute name="min" type="xs:double"/>
                <xs:attribute name="max" type="xs:double"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="OutputsType">
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="file" type="FileOutputType"/>
                <!--
                <xs:element name="query" type="QueryOutputType"/>
                -->
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <!--
    <xs:complexType name="QueryInputOutputType">
        <xs:complexContent>
            <xs:extension base="InputOutputType">
                <xs:attribute name="schemaName" type="xs:string" use="required"/>
                <xs:attribute name="queryName" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="QueryInputType">
        <xs:complexContent>
            <xs:extension base="QueryInputOutputType">
                <xs:attributeGroup ref="InputAttrGroup"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="QueryOutputType">
        <xs:complexContent>
            <xs:extension base="QueryInputOutputType">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    -->

</xs:schema>

